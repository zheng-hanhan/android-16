/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.libcore.timezone.telephonylookup;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Objects;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

/**
 * A class that knows about the structure of the telephonylookup.xml file.
 */
final class TelephonyLookupXmlFile {

    // <telephony_lookup>
    private static final String TELEPHONY_LOOKUP_ELEMENT = "telephony_lookup";

    // <networks>
    private static final String NETWORKS_ELEMENT = "networks";

    // <network mcc="123" mnc="456" country="gu">
    private static final String NETWORK_ELEMENT = "network";
    private static final String MOBILE_COUNTRY_CODE_ATTRIBUTE = "mcc";
    private static final String MOBILE_NETWORK_CODE_ATTRIBUTE = "mnc";
    private static final String COUNTRY_ISO_CODE_ATTRIBUTE = "country";

    // <mobile_countries>
    private static final String MOBILE_COUNTRIES_ELEMENT = "mobile_countries";

    // <mobile_country mcc="123" [default="gu"]>
    private static final String MOBILE_COUNTRY_ELEMENT = "mobile_country";
    private static final String DEFAULT_ATTRIBUTE = "default";

    static void write(TelephonyLookup telephonyLookup, String outputFile)
            throws XMLStreamException, IOException {
        /*
         * The required XML structure is:
         * <telephony_lookup>
         *   <networks>
         *     <network mcc="123" mnc="456" country="zz"/>
         *     <network mcc="123" mnc="789" country="zz"/>
         *   </networks>
         *
         *   <mobile_countries>
         *     <mobile_country mcc="310"/>
         *       <country>us</country>
         *     </mobile_country>
         *     <mobile_country mcc="340" default="gp">
         *       <country>gp</country>
         *       <country>gf</country>
         *     </mobile_country>
         *   </mobile_countries>
         * </telephony_lookup>
         */

        StringWriter writer = new StringWriter();
        writeRaw(telephonyLookup, writer);
        String rawXml = writer.getBuffer().toString();

        TransformerFactory factory = TransformerFactory.newInstance();
        try (Writer fileWriter = new OutputStreamWriter(
                new FileOutputStream(outputFile), StandardCharsets.UTF_8)) {

            // Transform the XML with the identity transform but with indenting
            // so it's more human-readable.
            Transformer transformer = factory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "1");
            transformer.transform(
                    new StreamSource(new StringReader(rawXml)), new StreamResult(fileWriter));
        } catch (TransformerException e) {
            throw new XMLStreamException(e);
        }
    }

    private static void writeRaw(TelephonyLookup telephonyLookup, Writer fileWriter)
            throws XMLStreamException {
        XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory();
        XMLStreamWriter xmlWriter = xmlOutputFactory.createXMLStreamWriter(fileWriter);
        xmlWriter.writeStartDocument();
        xmlWriter.writeComment("\n\n **** Autogenerated file - DO NOT EDIT ****\n\n");
        TelephonyLookup.writeXml(telephonyLookup, xmlWriter);
        xmlWriter.writeEndDocument();
    }

    static class TelephonyLookup {
        private final List<Network> networks;
        private final List<MobileCountry> mobileCountries;

        TelephonyLookup(List<Network> networks, List<MobileCountry> mobileCountries) {
            this.networks = networks;
            this.mobileCountries = mobileCountries;
        }

        static void writeXml(TelephonyLookup telephonyLookup, XMLStreamWriter writer)
                throws XMLStreamException {
            writer.writeStartElement(TELEPHONY_LOOKUP_ELEMENT);

            // Networks
            writer.writeStartElement(NETWORKS_ELEMENT);
            for (Network network : telephonyLookup.networks) {
                network.writeXml(network, writer);
            }
            writer.writeEndElement(); // NETWORKS_ELEMENT

            // Mobile Countries
            writer.writeStartElement(MOBILE_COUNTRIES_ELEMENT);
            for (MobileCountry mobileCountry : telephonyLookup.mobileCountries) {
                mobileCountry.writeXml(mobileCountry, writer);
            }
            writer.writeEndElement(); // MOBILE_COUNTRIES_ELEMENT

            writer.writeEndElement(); // TELEPHONY_LOOKUP_ELEMENT
        }
    }

    static class Network {

        private final String mcc;
        private final String mnc;
        private final String countryIsoCode;

        Network(String mcc, String mnc, String countryIsoCode) {
            this.mcc = Objects.requireNonNull(mcc);
            this.mnc = Objects.requireNonNull(mnc);
            this.countryIsoCode = Objects.requireNonNull(countryIsoCode);
        }

        static void writeXml(Network network, XMLStreamWriter writer)
                throws XMLStreamException {
            writer.writeStartElement(NETWORK_ELEMENT);
            writer.writeAttribute(MOBILE_COUNTRY_CODE_ATTRIBUTE, network.mcc);
            writer.writeAttribute(MOBILE_NETWORK_CODE_ATTRIBUTE, network.mnc);
            writer.writeAttribute(COUNTRY_ISO_CODE_ATTRIBUTE, network.countryIsoCode);
            writer.writeEndElement(); // NETWORK_ELEMENT
        }
    }

    static class MobileCountry {

        private final String mcc;
        private final List<String> countryIsoCodes;

        MobileCountry(String mcc, List<String> countryIsoCodes) {
            this.mcc = Objects.requireNonNull(mcc);
            this.countryIsoCodes = Objects.requireNonNull(countryIsoCodes);
        }

        static void writeXml(MobileCountry mobileCountry, XMLStreamWriter writer)
                throws XMLStreamException {
            writer.writeStartElement(MOBILE_COUNTRY_ELEMENT);
            writer.writeAttribute(MOBILE_COUNTRY_CODE_ATTRIBUTE, mobileCountry.mcc);

            if (mobileCountry.countryIsoCodes.size() > 1) {
                writer.writeAttribute(DEFAULT_ATTRIBUTE, mobileCountry.countryIsoCodes.getFirst());
            }

            for (String countryIsoCode : mobileCountry.countryIsoCodes) {
                writer.writeStartElement(COUNTRY_ISO_CODE_ATTRIBUTE);
                writer.writeCharacters(countryIsoCode);
                writer.writeEndElement(); // COUNTRY_ISO_CODE_ATTRIBUTE
            }

            writer.writeEndElement(); // MOBILE_COUNTRY_ELEMENT
        }
    }
}
